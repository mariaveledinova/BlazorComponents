@page "/fetchdatatable"
@using BlazorComponents.Data
@using BlazorComponents.Data.DBData
@using Telerik.Blazor.Components.Grid
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

@if (forecasts == null)
{
    <!-- Show this if the current user has no data... yet... -->
    <p><em>Loading...</em></p>
}
else
{
    <!-- Show the forecasts for the current user -->
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.Value.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
                <td>
                    <!-- Edit the current forecast -->
                    <button class="btn btn-primary" @onclick="@(() => EditForecast(forecast))">
                        Edit
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
    <p>
        <!-- Add a new forecast -->
        <button class="btn btn-primary"
                @onclick="@AddNewForecast">
            Add New Forecast
        </button>
    </p>

    @if (ShowPopup)
    {
        <!-- This is the popup to create or edit a forecast -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit Forecast</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                                @onclick="@ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current forecast -->
                    <div class="modal-body">
                        <input class="form-control" type="text"
                               placeholder="Celsius forecast"
                               @bind="@objWeatherForecast.TemperatureC" />
                        <input class="form-control" type="text"
                               placeholder="Fahrenheit forecast"
                               @bind="@objWeatherForecast.TemperatureF" />
                        <input class="form-control" type="text"
                               placeholder="Summary"
                               @bind="@objWeatherForecast.Summary" />
                        <br />
                        <!-- Button to save the forecast -->
                        <button class="btn btn-primary" @onclick="@SaveForecast">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

}

@code{

    List<WeatherForecast> forecasts;
    WeatherForecast objWeatherForecast = new WeatherForecast();


    protected override async Task OnInitAsync()
    {
        forecasts = await ForecastService.GetForecastAsync();
    }

    void EditForecast(WeatherForecast weatherForecast)
    {
        // Set the selected forecast as the current forecast
        objWeatherForecast = weatherForecast;
        // Open the Popup
        ShowPopup = true;
    }

    bool ShowPopup = false;

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    void AddNewForecast()
    {
        // Make new forecast
        objWeatherForecast = new WeatherForecast();
        // Set Id to 0 so we know it is a new record
        objWeatherForecast.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // A new forecast will have the Id set to 0
        if (objWeatherForecast.Id == 0)
        {
            // Create new forecast
            WeatherForecast objNewWeatherForecast = new WeatherForecast();

            objNewWeatherForecast.Date = System.DateTime.Now;
            objNewWeatherForecast.Summary = objWeatherForecast.Summary;
            objNewWeatherForecast.TemperatureC =
            Convert.ToInt32(objWeatherForecast.TemperatureC);
            objNewWeatherForecast.TemperatureF =
            Convert.ToInt32(objWeatherForecast.TemperatureF);
            // Save the result
            var result = ForecastService.CreateForecastAsync(objNewWeatherForecast);
        }
    else
    {
        // This is an update
        var result = ForecastService.UpdateForecastAsync(objWeatherForecast);
    }
        // Get the forecasts for the current user
        forecasts = await ForecastService.GetForecastAsync();
    }
 }
